#!/usr/bin/python3

# NB: This file gets run inside of a container with nothing else present.  It
# needs to depend on only the Python standard library.

import argparse
import os
import shlex
import subprocess
import sys


def log(*parts: object) -> None:
    print(*parts, file=sys.stderr)


def run(*cmd: str, tries: int = 1) -> None:
    joined = shlex.join(cmd)

    for attempt in range(1, tries + 1):
        try:
            log('\n+', joined)
            subprocess.check_call(cmd)
            return
        except subprocess.CalledProcessError as exc:
            log(f'\n> Attempt {attempt} failed with code {exc.returncode}.')

    sys.exit(f'\n*** Failed to run command {joined}.  Aborting.')


def output(*cmd: str) -> str:
    try:
        return subprocess.check_output(cmd, text=True).strip()
    except subprocess.CalledProcessError as exc:
        sys.exit(f'\n*** Failed to run command {shlex.join(cmd)} (code {exc.returncode}).  Aborting.')


def git(*cmd: str, tries: int = 1) -> None:
    run('git', *cmd, tries=tries)


def git_output(*cmd: str) -> str:
    return output('git', *cmd)


def test_repo(repository: str, revision: str | None, rebase: str | None) -> None:
    run('cat', '/usr/lib/os-release')
    run('cat', '/run/.containerenv')
    run('hostname')
    run('uname', '-a')
    run('mkdir', '-p', os.environ['TEST_ATTACHMENTS'])

    git('clone', '--', repository, 'make-checkout-workdir', tries=5)

    print('\n+ cd make-checkout-workdir', file=sys.stderr)
    try:
        os.chdir('make-checkout-workdir')
    except OSError as exc:
        sys.exit(str(exc))

    if revision:
        git('fetch', '--', 'origin', revision, tries=5)
        git('checkout', '--detach', 'FETCH_HEAD')

    if rebase:
        git('fetch', '--', 'origin', rebase, tries=5)
        # Do it this way to get the commit ID in the log
        base = git_output('rev-parse', 'FETCH_HEAD')
        git('rebase', '--', base)

        git('log', 'HEAD', f'^{base}')
        git('log', '-n1', base)
    else:
        git('log', '-n1')

    for cmd in ('.cockpit-ci/run', 'test/run'):
        try:
            log('\n+', shlex.quote(cmd))
            os.execv(cmd, [cmd])
        except FileNotFoundError as exc:
            log(exc)
        except OSError as exc:
            log(exc)
            break

    sys.exit('\n*** Failed to execute testing entry point.')


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument('repository', help='The git repository to clone')
    parser.add_argument('revision', nargs='?', help='The revision to test')
    parser.add_argument('rebase', nargs='?', help='Target branch to rebase onto')
    args = parser.parse_args()

    # All output to stdout â€” otherwise podman reorders things
    os.dup2(1, 2)

    test_repo(args.repository, args.revision, args.rebase)


if __name__ == '__main__':
    main()
